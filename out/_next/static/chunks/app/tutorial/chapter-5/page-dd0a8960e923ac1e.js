(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[905],{291:function(e,s,t){Promise.resolve().then(t.bind(t,7046))},7046:function(e,s,t){"use strict";t.r(s),t.d(s,{default:function(){return p}});var n=t(7437),a=t(2265),r=t(7648),i=t(9376),o=t(2660),d=t(5302),l=t(6858),c=t(2543),u=t(2119);function p(){let e=(0,i.useSearchParams)(),[s,t]=(0,a.useState)(0),[p,h]=(0,a.useState)([]),m=s=>{let t=new URLSearchParams(e.toString());return t.toString()?"".concat(s,"?").concat(t.toString()):s};(0,a.useEffect)(()=>{(0,u.xC)(),h(b.map((e,s)=>(0,u.qM)(e.id)?s:-1).filter(e=>-1!==e))},[]);let b=[{id:"database-introduction",title:"Understanding Databases",type:"explanation",content:(0,n.jsxs)("div",{className:"space-y-6",children:[(0,n.jsx)("h2",{className:"text-2xl font-bold text-gray-900",children:"Chapter 5: Database Integration"}),(0,n.jsx)("p",{className:"text-lg text-gray-600",children:"Excellent! You've built a working API, but the data still disappears when the server restarts. Real applications need persistent, reliable data storage. Let's integrate a database."}),(0,n.jsxs)("div",{className:"explanation-box",children:[(0,n.jsx)("div",{className:"explanation-title",children:"What is a Database?"}),(0,n.jsxs)("div",{className:"explanation-text",children:[(0,n.jsx)("p",{className:"mb-3",children:"A database is like a digital filing cabinet that stores, organizes, and retrieves information efficiently. Unlike files or arrays in memory, databases are designed for reliability, speed, and concurrent access by multiple users."}),(0,n.jsxs)("ul",{className:"list-disc list-inside space-y-2",children:[(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"Persistence:"})," Data survives server restarts and system failures"]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"Concurrency:"})," Multiple users can access data simultaneously"]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"ACID Properties:"})," Atomicity, Consistency, Isolation, Durability"]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"Query Language:"})," Structured ways to find and manipulate data"]})]})]})]}),(0,n.jsx)("div",{className:"ministry-header",children:(0,n.jsx)("h3",{className:"text-xl font-bold",children:"Why the Ministry Needs a Database"})}),(0,n.jsxs)("div",{className:"ministry-content",children:[(0,n.jsx)("p",{className:"mb-4",children:"Government systems require enterprise-grade data management with audit trails, backup procedures, and regulatory compliance:"}),(0,n.jsxs)("div",{className:"grid md:grid-cols-2 gap-4",children:[(0,n.jsxs)("div",{className:"bg-red-50 p-4 rounded-lg border border-red-200",children:[(0,n.jsx)("h4",{className:"font-medium text-red-900 mb-2",children:"Current Issues"}),(0,n.jsxs)("ul",{className:"text-sm text-red-800 space-y-1",children:[(0,n.jsx)("li",{children:"• Data lost on server restart"}),(0,n.jsx)("li",{children:"• No data backup or recovery"}),(0,n.jsx)("li",{children:"• No audit trail for changes"}),(0,n.jsx)("li",{children:"• Cannot handle multiple users safely"})]})]}),(0,n.jsxs)("div",{className:"bg-green-50 p-4 rounded-lg border border-green-200",children:[(0,n.jsx)("h4",{className:"font-medium text-green-900 mb-2",children:"Database Benefits"}),(0,n.jsxs)("ul",{className:"text-sm text-green-800 space-y-1",children:[(0,n.jsx)("li",{children:"• Permanent data storage"}),(0,n.jsx)("li",{children:"• Automated backup and recovery"}),(0,n.jsx)("li",{children:"• Transaction logging and audit trails"}),(0,n.jsx)("li",{children:"• Safe concurrent access"})]})]})]})]}),(0,n.jsxs)("div",{className:"concept-callout",children:[(0,n.jsxs)("div",{className:"concept-title",children:[(0,n.jsx)("div",{className:"w-5 h-5 bg-tutorial-primary rounded mr-2"}),"BA Insight: Data Architecture"]}),(0,n.jsxs)("div",{className:"concept-text space-y-4",children:[(0,n.jsx)("p",{children:"Data requirements are among the most critical and costly to change later in development. Understanding database concepts helps you identify data needs early, write complete requirements, and avoid expensive architectural changes during development."}),(0,n.jsxs)("div",{className:"bg-blue-50 p-4 rounded-lg",children:[(0,n.jsx)("h4",{className:"font-semibold text-blue-900 mb-2",children:"Business Requirements → Database Design:"}),(0,n.jsxs)("div",{className:"space-y-3 text-sm",children:[(0,n.jsxs)("div",{className:"border-l-4 border-blue-500 pl-3",children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Requirement:"}),' "Track task assignment history for auditing"']}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Database Design:"})," Task_History table with timestamps, user_id, previous/new values"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"BA Questions:"})," How long to retain? Who can access? What triggers logging?"]})]}),(0,n.jsxs)("div",{className:"border-l-4 border-green-500 pl-3",children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Requirement:"}),' "System must handle 1000+ concurrent users"']}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Database Design:"})," Connection pooling, indexing strategy, query optimization"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"BA Questions:"})," Peak usage patterns? Read vs write ratios? Performance SLAs?"]})]}),(0,n.jsxs)("div",{className:"border-l-4 border-purple-500 pl-3",children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Requirement:"}),' "Users can only see their own department\'s tasks"']}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Database Design:"})," User-Department-Task relationships, row-level security"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"BA Questions:"})," Department hierarchies? Cross-department access? Admin overrides?"]})]})]})]}),(0,n.jsxs)("div",{className:"bg-green-50 p-4 rounded-lg",children:[(0,n.jsx)("h4",{className:"font-semibold text-green-900 mb-2",children:"Data Requirements Discovery Framework:"}),(0,n.jsxs)("div",{className:"text-sm space-y-2",children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Data Entities:"}),' What "things" does the business need to track? (Users, Tasks, Projects)']}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Relationships:"})," How do these entities connect? (One-to-many? Many-to-many?)"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Lifecycle:"})," How is data created, updated, archived, or deleted?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Retention:"})," How long must data be kept? What are the legal requirements?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Access Patterns:"})," Who reads/writes what data? How frequently?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Compliance:"})," GDPR, SOX, industry regulations affecting data handling"]})]})]}),(0,n.jsxs)("div",{className:"bg-purple-50 p-4 rounded-lg",children:[(0,n.jsx)("h4",{className:"font-semibold text-purple-900 mb-2",children:"Critical BA Questions for Database Requirements:"}),(0,n.jsxs)("div",{className:"text-sm space-y-2",children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Volume:"})," How much data? Growth projections over 3-5 years?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Performance:"})," How fast must queries respond? Acceptable downtime?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Security:"})," Who can access what data? Encryption requirements?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Integration:"})," Does this connect to other systems? Data synchronization needs?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Reporting:"})," What analytics or reports are needed? Real-time or batch?"]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("strong",{children:"Disaster Recovery:"})," Backup frequency? Recovery time objectives?"]})]})]}),(0,n.jsxs)("div",{className:"bg-red-50 p-4 rounded-lg",children:[(0,n.jsx)("h4",{className:"font-semibold text-red-900 mb-2",children:"Costly Data Requirement Mistakes to Avoid:"}),(0,n.jsxs)("ul",{className:"text-sm space-y-1",children:[(0,n.jsx)("li",{children:"• Not considering data relationships early (leads to complex joins or denormalization)"}),(0,n.jsx)("li",{children:"• Missing audit trail requirements (expensive to retrofit)"}),(0,n.jsx)("li",{children:"• Underestimating data volumes (performance issues in production)"}),(0,n.jsx)("li",{children:"• Ignoring regulatory compliance until late in development"}),(0,n.jsx)("li",{children:"• Not planning for data migration from existing systems"})]})]})]})]}),(0,n.jsxs)("div",{className:"bg-tutorial-primary text-white p-6 rounded-lg",children:[(0,n.jsx)("h3",{className:"text-lg font-bold mb-3",children:"Learning Objective"}),(0,n.jsx)("p",{children:"In this chapter, you'll integrate SQLite database with your API, learn about database schemas, and understand how enterprise data management works. You'll see how business requirements translate into database design decisions."})]})]})},{id:"setup-database",title:"Step 1: Setting Up SQLite Database",type:"coding",exercise:{title:"Add Database Configuration",description:"We'll add SQLite database integration to our API server, replacing the in-memory array with persistent storage.",instructions:["Install and configure SQLite database package","Create a database initialization function","Set up the tasks table with appropriate columns","Add database connection to the server startup"],language:"typescript",codeBlock:{code:'const sqlite3 = require(\'sqlite3\').verbose();\nconst path = require(\'path\');\n\n// Database setup\nconst dbPath = path.join(__dirname, \'ministry_tasks.db\');\nconst db = new sqlite3.Database(dbPath);\n\n// Initialize database\nfunction initializeDatabase() {\n  return new Promise((resolve, reject) => {\n    db.serialize(() => {\n      // Create tasks table\n      db.run(`\n        CREATE TABLE IF NOT EXISTS tasks (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          title TEXT NOT NULL,\n          description TEXT,\n          assignedTo TEXT,\n          completed BOOLEAN DEFAULT 0,\n          createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,\n          updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n      `, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          // Insert sample data if table is empty\n          db.get("SELECT COUNT(*) as count FROM tasks", (err, row) => {\n            if (err) {\n              reject(err);\n            } else if (row.count === 0) {\n              db.run(`\n                INSERT INTO tasks (title, description, assignedTo) \n                VALUES (?, ?, ?)\n              `, [\n                "Evaluate Mr. Smith\'s Silly Walk Application",\n                "Review submitted video and assess walk silliness level.",\n                "John Cleese"\n              ], (err) => {\n                if (err) reject(err);\n                else resolve();\n              });\n            } else {\n              resolve();\n            }\n          });\n        }\n      });\n    });\n  });\n}',explanations:[{line:"const sqlite3 = require('sqlite3').verbose();",explanation:"Import SQLite database library for Node.js with verbose error reporting enabled.",businessContext:"SQLite is perfect for learning and small applications - it's a file-based database that doesn't require a separate server."},{line:"const db = new sqlite3.Database(dbPath);",explanation:"Create a database connection to a file called 'ministry_tasks.db' in the current directory.",businessContext:"This creates a persistent database file that will survive server restarts, solving the data loss problem."},{line:"CREATE TABLE IF NOT EXISTS tasks (...)",explanation:"Define the structure of the tasks table with columns for all our task properties.",businessContext:"This creates the data schema - the blueprint for how task information is organized and stored."},{line:"id INTEGER PRIMARY KEY AUTOINCREMENT",explanation:"Create an auto-incrementing ID column that uniquely identifies each task.",businessContext:"Every task gets a unique identifier automatically, enabling precise tracking and updates."},{line:"createdAt DATETIME DEFAULT CURRENT_TIMESTAMP",explanation:"Automatically record when each task was created, providing an audit trail.",businessContext:"This implements the requirement for 'audit trails' - tracking when tasks were added to the system."}]},startingCode:"const express = require('express');\nconst cors = require('cors');\n// Step 1: Add database imports here\n// const sqlite3 = require('sqlite3').verbose();\n// const path = require('path');\n\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Step 1: Add database setup here\n// const dbPath = path.join(__dirname, 'ministry_tasks.db');\n// const db = new sqlite3.Database(dbPath);\n\n// In-memory task storage (to be replaced)\nlet tasks = [\n  {\n    id: 1,\n    title: \"Evaluate Mr. Smith's Silly Walk Application\",\n    description: \"Review submitted video and assess walk silliness level.\",\n    assignedTo: \"John Cleese\",\n    completed: false\n  }\n];\n\n// Step 1: Add database initialization function here\n\n// Routes (to be updated in next steps)\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Ministry of Silly Walks Task Management API',\n    version: '1.0.0 - Now with Database!',\n    database: 'SQLite'\n  });\n});\n\n// Start server\n// Step 1: Add database initialization before starting server\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",targetCode:"const express = require('express');\nconst cors = require('cors');\nconst sqlite3 = require('sqlite3').verbose();\nconst path = require('path');\n\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Database setup\nconst dbPath = path.join(__dirname, 'ministry_tasks.db');\nconst db = new sqlite3.Database(dbPath);\n\n// Initialize database\nfunction initializeDatabase() {\n  return new Promise((resolve, reject) => {\n    db.serialize(() => {\n      // Create tasks table\n      db.run(`\n        CREATE TABLE IF NOT EXISTS tasks (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          title TEXT NOT NULL,\n          description TEXT,\n          assignedTo TEXT,\n          completed BOOLEAN DEFAULT 0,\n          createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,\n          updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n      `, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          // Insert sample data if table is empty\n          db.get(\"SELECT COUNT(*) as count FROM tasks\", (err, row) => {\n            if (err) {\n              reject(err);\n            } else if (row.count === 0) {\n              db.run(`\n                INSERT INTO tasks (title, description, assignedTo) \n                VALUES (?, ?, ?)\n              `, [\n                \"Evaluate Mr. Smith's Silly Walk Application\",\n                \"Review submitted video and assess walk silliness level.\",\n                \"John Cleese\"\n              ], (err) => {\n                if (err) reject(err);\n                else resolve();\n              });\n            } else {\n              resolve();\n            }\n          });\n        }\n      });\n    });\n  });\n}\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Ministry of Silly Walks Task Management API',\n    version: '1.0.0 - Now with Database!',\n    database: 'SQLite'\n  });\n});\n\n// Start server with database initialization\nasync function startServer() {\n  try {\n    await initializeDatabase();\n    console.log('Database initialized successfully');\n    \n    app.listen(PORT, () => {\n      console.log(`Server running on http://localhost:${PORT}`);\n      console.log('Database file: ministry_tasks.db');\n    });\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    process.exit(1);\n  }\n}\n\nstartServer();",hints:["Start by importing SQLite3 library with verbose() for better error reporting","Create a database file path using path.join(__dirname, 'ministry_tasks.db') for persistence","Write an initializeDatabase() function that returns a Promise for proper async handling","Use db.serialize() to ensure database operations run in the correct order","Create the tasks table with columns for id, title, description, assignedTo, completed, createdAt, updatedAt","Set id as INTEGER PRIMARY KEY AUTOINCREMENT for automatic unique identifiers","Add audit trail columns (createdAt, updatedAt) with DEFAULT CURRENT_TIMESTAMP for automatic timestamps","Insert sample data only if the table is empty to avoid duplicates on restart","Replace the simple app.listen() with an async startServer() function that initializes the database first"],explanation:{whatIsHappening:"You've replaced the temporary in-memory array with a persistent SQLite database! The server now creates a database file, defines a proper table schema with audit timestamps, and initializes sample data. The database connection is established before the server starts accepting requests.",whyItMatters:"This solves the fundamental problem of data persistence. Tasks now survive server restarts, and the audit trail timestamps meet compliance requirements. The database schema enforces data consistency and provides a foundation for more advanced features like user management and reporting.",realWorldConnection:"This mirrors how real enterprise applications handle data - with persistent storage, proper schemas, and initialization procedures. When you write requirements about 'data retention' or 'audit compliance,' this is the type of infrastructure that enables those capabilities. Understanding database integration helps you write more informed requirements about data management and system reliability.",keyTerms:{"Database schema":"The structure and organization of data tables and columns","Primary key":"A unique identifier for each row in a database table",AUTOINCREMENT:"Automatically generates unique sequential numbers for new records","Audit trail":"Automatic recording of when data was created or modified"}}}},{id:"convert-api-endpoints",title:"Step 2: Converting API to Use Database",type:"coding",exercise:{title:"Update CRUD Endpoints for Database",description:"Now let's update all our API endpoints to use the database instead of the in-memory array.",instructions:["Replace the GET /tasks route with database query functionality","Replace the POST /tasks route with database insert functionality","Replace the PUT /tasks/:id route with database update functionality","Replace the DELETE /tasks/:id route with database delete functionality","Copy each route from the code block and replace the corresponding route in your editor"],language:"typescript",codeBlock:{code:"// GET all tasks\napp.get('/tasks', (req, res) => {\n  db.all(\"SELECT * FROM tasks ORDER BY createdAt DESC\", (err, rows) => {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: rows,\n      count: rows.length\n    });\n  });\n});\n\n// POST new task\napp.post('/tasks', (req, res) => {\n  const { title, description, assignedTo } = req.body;\n  \n  if (!title) {\n    return res.status(400).json({\n      success: false,\n      error: 'Title is required'\n    });\n  }\n  \n  db.run(`\n    INSERT INTO tasks (title, description, assignedTo) \n    VALUES (?, ?, ?)\n  `, [title, description || 'Status: Pending', assignedTo || 'Current User'], function(err) {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    // Get the inserted task\n    db.get(\"SELECT * FROM tasks WHERE id = ?\", [this.lastID], (err, row) => {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          error: 'Database error'\n        });\n      }\n      \n      res.status(201).json({\n        success: true,\n        data: row\n      });\n    });\n  });\n});\n\n// PUT update task\napp.put('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const updates = req.body;\n  \n  // Build dynamic update query\n  const fields = Object.keys(updates).map(key => `${key} = ?`).join(', ');\n  const values = Object.values(updates);\n  values.push(taskId);\n  \n  db.run(`\n    UPDATE tasks \n    SET ${fields}, updatedAt = CURRENT_TIMESTAMP \n    WHERE id = ?\n  `, values, function(err) {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    if (this.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found'\n      });\n    }\n    \n    // Get the updated task\n    db.get(\"SELECT * FROM tasks WHERE id = ?\", [taskId], (err, row) => {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          error: 'Database error'\n        });\n      }\n      \n      res.json({\n        success: true,\n        data: row\n      });\n    });\n  });\n});\n\n// DELETE task\napp.delete('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  \n  // Get task before deleting for confirmation\n  db.get(\"SELECT * FROM tasks WHERE id = ?\", [taskId], (err, row) => {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    if (!row) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found'\n      });\n    }\n    \n    db.run(\"DELETE FROM tasks WHERE id = ?\", [taskId], function(err) {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          error: 'Database error'\n        });\n      }\n      \n      res.json({\n        success: true,\n        data: row\n      });\n    });\n  });\n});",explanations:[{line:'db.all("SELECT * FROM tasks ORDER BY createdAt DESC", (err, rows) => {',explanation:"Query all tasks from the database, ordered by creation date (newest first).",businessContext:"This provides a chronological view of tasks, helping users see recent activity first."},{line:"db.run(`INSERT INTO tasks (title, description, assignedTo) VALUES (?, ?, ?)`, [title, description || 'Status: Pending', assignedTo || 'Current User'], function(err) {",explanation:"Insert a new task into the database using parameterized queries to prevent SQL injection.",businessContext:"Parameterized queries are essential for security - they prevent malicious users from damaging the database."},{line:'db.get("SELECT * FROM tasks WHERE id = ?", [this.lastID], (err, row) => {',explanation:"Retrieve the newly inserted task using the auto-generated ID to return it to the client.",businessContext:"This confirms the task was created successfully and provides the client with the complete task data including the database-generated ID."},{line:"const fields = Object.keys(updates).map(key => `${key} = ?`).join(', ');",explanation:"Build a dynamic UPDATE query that can handle partial updates to any task fields.",businessContext:"This flexibility allows the API to update only specific fields rather than requiring all data, making it more efficient for frontend applications."},{line:"if (this.changes === 0) {",explanation:"Check if the UPDATE operation actually modified any rows - if not, the task ID doesn't exist.",businessContext:"This provides proper error handling when users try to update non-existent tasks, improving the user experience."},{line:'db.get("SELECT * FROM tasks WHERE id = ?", [taskId], (err, row) => {',explanation:"Retrieve the task before deleting it to return confirmation of what was removed.",businessContext:"This provides an audit trail and confirmation to users about what was deleted, which is important for data governance."}]},startingCode:"// Previous database setup code...\n\n// GET all tasks - UPDATE TO USE DATABASE\napp.get('/tasks', (req, res) => {\n  // Replace this with database query\n  res.json({\n    success: true,\n    data: [], // This should come from database\n    count: 0\n  });\n});\n\n// POST new task - UPDATE TO USE DATABASE  \napp.post('/tasks', (req, res) => {\n  const { title, description, assignedTo } = req.body;\n  \n  if (!title) {\n    return res.status(400).json({\n      success: false,\n      error: 'Title is required'\n    });\n  }\n  \n  // Replace this with database insert\n  res.status(201).json({\n    success: true,\n    data: { message: 'Should insert into database' }\n  });\n});\n\n// PUT update task - UPDATE TO USE DATABASE\napp.put('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  \n  // Replace this with database update\n  res.json({\n    success: true,\n    data: { message: 'Should update in database' }\n  });\n});\n\n// DELETE task - UPDATE TO USE DATABASE\napp.delete('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  \n  // Replace this with database delete\n  res.json({\n    success: true,\n    data: { message: 'Should delete from database' }\n  });\n});",targetCode:"// GET all tasks\napp.get('/tasks', (req, res) => {\n  db.all(\"SELECT * FROM tasks ORDER BY createdAt DESC\", (err, rows) => {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: rows,\n      count: rows.length\n    });\n  });\n});\n\n// POST new task\napp.post('/tasks', (req, res) => {\n  const { title, description, assignedTo } = req.body;\n  \n  if (!title) {\n    return res.status(400).json({\n      success: false,\n      error: 'Title is required'\n    });\n  }\n  \n  db.run(`\n    INSERT INTO tasks (title, description, assignedTo) \n    VALUES (?, ?, ?)\n  `, [title, description || 'Status: Pending', assignedTo || 'Current User'], function(err) {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    // Get the inserted task\n    db.get(\"SELECT * FROM tasks WHERE id = ?\", [this.lastID], (err, row) => {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          error: 'Database error'\n        });\n      }\n      \n      res.status(201).json({\n        success: true,\n        data: row\n      });\n    });\n  });\n});\n\n// PUT update task\napp.put('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const updates = req.body;\n  \n  // Build dynamic update query\n  const fields = Object.keys(updates).map(key => `${key} = ?`).join(', ');\n  const values = Object.values(updates);\n  values.push(taskId);\n  \n  db.run(`\n    UPDATE tasks \n    SET ${fields}, updatedAt = CURRENT_TIMESTAMP \n    WHERE id = ?\n  `, values, function(err) {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    if (this.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found'\n      });\n    }\n    \n    // Get the updated task\n    db.get(\"SELECT * FROM tasks WHERE id = ?\", [taskId], (err, row) => {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          error: 'Database error'\n        });\n      }\n      \n      res.json({\n        success: true,\n        data: row\n      });\n    });\n  });\n});\n\n// DELETE task\napp.delete('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  \n  // Get task before deleting for confirmation\n  db.get(\"SELECT * FROM tasks WHERE id = ?\", [taskId], (err, row) => {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n    \n    if (!row) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found'\n      });\n    }\n    \n    db.run(\"DELETE FROM tasks WHERE id = ?\", [taskId], function(err) {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          error: 'Database error'\n        });\n      }\n      \n      res.json({\n        success: true,\n        data: row\n      });\n    });\n  });\n});",hints:["Replace each endpoint one at a time - start with GET /tasks using db.all() to select all records","Use parameterized queries with ? placeholders to prevent SQL injection attacks","For GET requests, use db.all() to get multiple rows or db.get() to get a single row","For POST requests, use db.run() for INSERT statements and access this.lastID for the new record ID","Add proper error handling with try-catch blocks and return appropriate HTTP status codes","For PUT requests, build dynamic queries that only update the fields that were provided","Check this.changes after UPDATE/DELETE operations to verify rows were actually affected","For DELETE requests, retrieve the record first to return confirmation of what was deleted","Always return consistent JSON responses with success/error flags and appropriate data"],explanation:{whatIsHappening:"You've converted your entire API to use persistent database storage! Each endpoint now uses proper SQL queries with parameterized statements for security. The database handles all data operations while maintaining the same API interface that frontends expect.",whyItMatters:"This completes the transition to enterprise-grade data management. The API now provides true persistence, concurrent access safety, and automatic audit trails. Error handling ensures reliable operation, and parameterized queries prevent security vulnerabilities.",realWorldConnection:"This demonstrates how business requirements translate into technical implementation - 'data must persist' becomes database integration, 'audit trails' become timestamp columns, and 'system reliability' becomes proper error handling. Understanding database operations helps you write more precise requirements about data management and system behavior.",keyTerms:{"SQL queries":"Structured Query Language commands for database operations","Parameterized queries":"Using placeholders (?) to safely insert user data into SQL","Database transactions":"Operations that either complete fully or not at all","Error handling":"Graceful management of database and system failures"}}}}],g=e=>{p.includes(e)||(h([...p,e]),(0,u.jq)(b[e].id))},x=p.length===b.length;return(0,n.jsxs)("div",{className:"min-h-screen bg-gray-50",children:[(0,n.jsx)("header",{className:"bg-white shadow-sm border-b border-gray-200",children:(0,n.jsx)("div",{className:"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4",children:(0,n.jsxs)("div",{className:"flex items-center justify-between",children:[(0,n.jsxs)(r.default,{href:m("/tutorial/chapter-4"),className:"flex items-center text-gray-600 hover:text-gray-900",children:[(0,n.jsx)(o.Z,{className:"w-5 h-5 mr-2"}),"Back to Chapter 4"]}),(0,n.jsxs)("div",{className:"text-center",children:[(0,n.jsx)("h1",{className:"text-xl font-bold text-gray-900",children:"Chapter 5: Database Integration"}),(0,n.jsx)("p",{className:"text-sm text-gray-600",children:"Adding persistent storage with SQLite"})]}),(0,n.jsxs)("div",{className:"text-sm text-gray-500",children:["Step ",s+1," of ",b.length]})]})})}),(0,n.jsx)("div",{className:"px-4 sm:px-6 lg:px-8 py-8",children:(0,n.jsxs)("div",{className:"grid lg:grid-cols-4 gap-8",children:[(0,n.jsx)("div",{className:"lg:col-span-1",children:(0,n.jsxs)("div",{className:"tutorial-card sticky top-8",children:[(0,n.jsx)("h3",{className:"font-semibold text-gray-900 mb-4",children:"Chapter 5 Progress"}),(0,n.jsx)("div",{className:"space-y-3",children:b.map((e,a)=>(0,n.jsx)("button",{onClick:()=>t(a),className:"w-full text-left p-3 rounded-lg transition-colors ".concat(s===a?"bg-tutorial-primary text-white":p.includes(a)?"bg-green-50 text-green-800 border border-green-200":"bg-gray-50 text-gray-700 hover:bg-gray-100"),children:(0,n.jsxs)("div",{className:"flex items-center",children:[p.includes(a)?(0,n.jsx)(d.Z,{className:"w-5 h-5 mr-3 text-green-600"}):(0,n.jsx)("div",{className:"w-5 h-5 mr-3 rounded-full border-2 ".concat(s===a?"border-white":"border-gray-300")}),(0,n.jsx)("span",{className:"text-sm font-medium",children:e.title})]})},e.id))}),x&&(0,n.jsxs)("div",{className:"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg",children:[(0,n.jsx)("p",{className:"text-sm text-green-800 font-medium mb-2",children:"Chapter 5 Complete!"}),(0,n.jsxs)(r.default,{href:m("/tutorial/chapter-6"),className:"inline-flex items-center text-sm text-green-700 hover:text-green-900",children:["Start Chapter 6",(0,n.jsx)(l.Z,{className:"w-4 h-4 ml-1"})]})]})]})}),(0,n.jsx)("div",{className:"lg:col-span-3",children:(0,n.jsxs)("div",{className:"space-y-8",children:[(0,n.jsxs)("div",{children:[(0,n.jsxs)("div",{className:"flex items-center justify-between mb-2",children:[(0,n.jsx)("span",{className:"text-sm font-medium text-gray-700",children:"Chapter Progress"}),(0,n.jsxs)("span",{className:"text-sm text-gray-500",children:[p.length," / ",b.length," completed"]})]}),(0,n.jsx)("div",{className:"progress-bar",children:(0,n.jsx)("div",{className:"progress-fill",style:{width:"".concat(p.length/b.length*100,"%")}})})]}),"explanation"===b[s].type?(0,n.jsxs)("div",{className:"tutorial-card",children:[b[s].content,(0,n.jsxs)("div",{className:"flex items-center justify-between pt-6 border-t border-gray-200 mt-8",children:[(0,n.jsxs)("button",{onClick:()=>t(Math.max(0,s-1)),disabled:0===s,className:"flex items-center ".concat(0===s?"text-gray-400 cursor-not-allowed":"text-tutorial-primary hover:text-blue-700"),children:[(0,n.jsx)(o.Z,{className:"w-4 h-4 mr-2"}),"Previous"]}),(0,n.jsxs)("button",{onClick:()=>{g(s),s<b.length-1&&t(s+1)},className:"tutorial-button-primary",children:[p.includes(s)?s===b.length-1?"Complete Chapter":"Next Step":"Mark Complete & Continue",(0,n.jsx)(l.Z,{className:"w-4 h-4 ml-2"})]})]})]}):(0,n.jsx)(c.Z,{...b[s].exercise,stepId:b[s].id,onComplete:()=>{g(s),setTimeout(()=>{s<b.length-1&&t(s+1)},2e3)}})]})})]})})]})}}},function(e){e.O(0,[451,202,971,117,744],function(){return e(e.s=291)}),_N_E=e.O()}]);