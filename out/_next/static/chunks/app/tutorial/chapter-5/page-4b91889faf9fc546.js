(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[905],{291:function(e,s,t){Promise.resolve().then(t.bind(t,7046))},7046:function(e,s,t){"use strict";t.r(s),t.d(s,{default:function(){return u}});var n=t(7437),a=t(2265),r=t(7648),i=t(5846),o=t(2660),d=t(5302),l=t(6858),c=t(3240),p=t(2119);function u(){let[e,s]=(0,a.useState)(0),[t,u]=(0,a.useState)([]);(0,a.useEffect)(()=>{(0,p.xC)(),u(h.map((e,s)=>(0,p.qM)(e.id)?s:-1).filter(e=>-1!==e))},[]);let h=[{id:"backend-api-introduction",title:"Understanding Backend APIs",type:"explanation",content:(0,n.jsxs)("div",{className:"space-y-6",children:[(0,n.jsx)("h2",{className:"text-2xl font-bold text-gray-900",children:"Chapter 5: Building the Backend API"}),(0,n.jsx)("p",{className:"text-lg text-gray-600",children:"Great work! Your task manager now has full CRUD functionality with persistent storage. But what happens when John Cleese wants to share tasks with Terry Jones? Or when the Ministry needs to generate reports? We need a backend API."}),(0,n.jsxs)("div",{className:"explanation-box",children:[(0,n.jsx)("div",{className:"explanation-title",children:"What is a Backend API?"}),(0,n.jsxs)("div",{className:"explanation-text",children:[(0,n.jsx)("p",{className:"mb-3",children:"An API (Application Programming Interface) is like a waiter in a restaurant. Your frontend (the customer) makes requests, the API takes those requests to the backend kitchen (server/database), and brings back the response."}),(0,n.jsxs)("ul",{className:"list-disc list-inside space-y-2",children:[(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"Frontend:"})," What users see and interact with (your HTML/CSS/JavaScript)"]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"Backend:"})," Server that processes requests, manages data, and enforces business rules"]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"API:"})," The interface that lets frontend and backend communicate"]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("strong",{children:"Database:"})," Where data is permanently stored and organized"]})]}),(0,n.jsx)("p",{className:"mt-3",children:"Think of it like a government office: citizens (frontend) make requests at the front desk (API), clerks (backend) process the paperwork using filing systems (database), and return the results."})]})]}),(0,n.jsx)("div",{className:"ministry-header",children:(0,n.jsx)("h3",{className:"text-xl font-bold",children:"Why the Ministry Needs a Backend API"})}),(0,n.jsxs)("div",{className:"ministry-content",children:[(0,n.jsx)("p",{className:"mb-4",children:"The Ministry's task management system needs to work across the entire department, not just individual browsers. A backend API enables enterprise-level functionality:"}),(0,n.jsxs)("div",{className:"grid md:grid-cols-2 gap-4",children:[(0,n.jsxs)("div",{className:"bg-blue-50 p-4 rounded-lg border border-blue-200",children:[(0,n.jsx)("h4",{className:"font-medium text-blue-900 mb-2",children:"Current Limitations"}),(0,n.jsxs)("ul",{className:"text-sm text-blue-800 space-y-1",children:[(0,n.jsx)("li",{children:"• Tasks only exist in one browser"}),(0,n.jsx)("li",{children:"• No sharing between staff members"}),(0,n.jsx)("li",{children:"• No central oversight or reporting"}),(0,n.jsx)("li",{children:"• No backup or data security"})]})]}),(0,n.jsxs)("div",{className:"bg-green-50 p-4 rounded-lg border border-green-200",children:[(0,n.jsx)("h4",{className:"font-medium text-green-900 mb-2",children:"API Benefits"}),(0,n.jsxs)("ul",{className:"text-sm text-green-800 space-y-1",children:[(0,n.jsx)("li",{children:"• Shared data across the department"}),(0,n.jsx)("li",{children:"• Task assignment and collaboration"}),(0,n.jsx)("li",{children:"• Centralized reporting and analytics"}),(0,n.jsx)("li",{children:"• Secure data backup and recovery"})]})]})]})]}),(0,n.jsxs)("div",{className:"concept-callout",children:[(0,n.jsxs)("div",{className:"concept-title",children:[(0,n.jsx)(i.Z,{className:"w-5 h-5 mr-2"}),"BA Insight: API Requirements"]}),(0,n.jsx)("p",{className:"concept-text",children:'When you write requirements like "users should be able to share data" or "the system should provide reports," you\'re defining API needs. Understanding REST endpoints, HTTP methods, and data flow helps you write more precise integration requirements and communicate effectively with technical teams about system architecture.'})]}),(0,n.jsxs)("div",{className:"bg-tutorial-primary text-white p-6 rounded-lg",children:[(0,n.jsx)("h3",{className:"text-lg font-bold mb-3",children:"\uD83C\uDFAF Learning Objective"}),(0,n.jsx)("p",{children:"In this chapter, you'll build a simple Node.js API with endpoints for creating, reading, updating, and deleting tasks. You'll learn how frontend applications communicate with backends and understand the technical foundation that enables multi-user systems."})]})]})},{id:"create-server-file",title:"Step 1: Creating the Server",type:"coding",exercise:{title:"Build a Basic Node.js Server",description:"We'll create a simple server using Node.js and Express that can handle HTTP requests. This will be the foundation of our API.",instructions:["Create a new file called server.js","Set up Express framework for handling web requests","Add a basic route that responds with a welcome message","Start the server on port 3000"],language:"javascript",codeBlock:{code:"const express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// In-memory task storage (temporary)\nlet tasks = [\n  {\n    id: 1,\n    title: \"Evaluate Mr. Smith's Silly Walk Application\",\n    description: \"Review submitted video and assess walk silliness level.\",\n    assignedTo: \"John Cleese\",\n    completed: false\n  }\n];\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Ministry of Silly Walks Task Management API',\n    version: '1.0.0',\n    endpoints: {\n      'GET /tasks': 'Get all tasks',\n      'POST /tasks': 'Create a new task',\n      'PUT /tasks/:id': 'Update a task',\n      'DELETE /tasks/:id': 'Delete a task'\n    }\n  });\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",explanations:[{line:"const express = require('express');\nconst cors = require('cors');",explanation:"Import the Express framework for creating web servers and CORS for allowing cross-origin requests.",businessContext:"Express simplifies server creation, while CORS enables your frontend (running on a different port) to communicate with the API."},{line:"app.use(cors());\napp.use(express.json());",explanation:"Configure middleware that handles cross-origin requests and automatically parses JSON data from requests.",businessContext:"This enables secure communication between your frontend and backend, allowing data to flow between different parts of the system."},{line:'let tasks = [ { id: 1, title: "Evaluate Mr. Smith\'s..." } ];',explanation:"Create temporary in-memory storage for tasks with a sample task already included.",businessContext:"This simulates a database with existing Ministry work - in production, this would be replaced by a real database."},{line:"app.get('/', (req, res) => { res.json({ message: 'Ministry...' }); });",explanation:"Create an API endpoint that responds to GET requests with information about available API functions.",businessContext:"This serves as documentation for developers, listing what operations the API supports - essential for team collaboration."},{line:"app.listen(PORT, () => { console.log(`Server running...`); });",explanation:"Start the server and listen for incoming requests on port 3000, with a confirmation message.",businessContext:"This makes the API available for your frontend to connect to - the foundation for multi-user functionality."}]},startingCode:"// Ministry of Silly Walks Task Management API\n// server.js\n\n// Step 1: Import required packages\n// const express = require('express');\n// const cors = require('cors');\n\n// Step 2: Create Express app\n// const app = express();\n// const PORT = 3000;\n\n// Step 3: Add middleware\n// app.use(cors());\n// app.use(express.json());\n\n// Step 4: Create sample data\n// let tasks = [];\n\n// Step 5: Add welcome route\n// app.get('/', (req, res) => {\n//   res.json({ message: 'Welcome to Ministry API' });\n// });\n\n// Step 6: Start server\n// app.listen(PORT, () => {\n//   console.log('Server running on port', PORT);\n// });\n\nconsole.log('Ready to build your API server!');",targetCode:"const express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// In-memory task storage (temporary)\nlet tasks = [\n  {\n    id: 1,\n    title: \"Evaluate Mr. Smith's Silly Walk Application\",\n    description: \"Review submitted video and assess walk silliness level.\",\n    assignedTo: \"John Cleese\",\n    completed: false\n  }\n];\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Ministry of Silly Walks Task Management API',\n    version: '1.0.0',\n    endpoints: {\n      'GET /tasks': 'Get all tasks',\n      'POST /tasks': 'Create a new task',\n      'PUT /tasks/:id': 'Update a task',\n      'DELETE /tasks/:id': 'Delete a task'\n    }\n  });\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",hints:["Uncomment each section step by step, starting with the imports","Express is a popular Node.js framework that simplifies server creation","CORS (Cross-Origin Resource Sharing) allows your frontend to talk to the backend","The tasks array simulates a database - in production you'd use a real database","The welcome route provides API documentation for developers"],explanation:{whatIsHappening:"You've created your first backend server! Express handles incoming HTTP requests, CORS enables cross-domain communication, and the middleware automatically parses JSON data. The server listens on port 3000 and provides a welcome endpoint that documents the available API functions.",whyItMatters:"This establishes the technical foundation for multi-user functionality. Instead of tasks living only in individual browsers, they can now be centrally managed and shared across the Ministry. The API documentation endpoint helps developers understand how to integrate with the system.",realWorldConnection:"This is how enterprise applications work - separate frontend and backend systems communicating via APIs. When you write requirements about 'system integration' or 'data sharing between departments,' this is the type of infrastructure that enables those capabilities. Understanding server architecture helps you write more informed requirements about scalability and system design.",keyTerms:{"Express.js":"A Node.js framework that simplifies creating web servers and APIs",Middleware:"Code that runs between receiving a request and sending a response",CORS:"Cross-Origin Resource Sharing - enables different domains to communicate","API endpoint":"A specific URL that accepts requests and returns responses"}}}},{id:"add-crud-endpoints",title:"Step 2: Adding CRUD Endpoints",type:"coding",exercise:{title:"Create API Endpoints for Task Operations",description:"Now let's add the core API endpoints that allow creating, reading, updating, and deleting tasks through HTTP requests.",instructions:["Add GET /tasks endpoint to retrieve all tasks","Add POST /tasks endpoint to create new tasks","Add PUT /tasks/:id endpoint to update existing tasks","Add DELETE /tasks/:id endpoint to remove tasks"],language:"javascript",codeBlock:{code:"// GET all tasks\napp.get('/tasks', (req, res) => {\n  res.json({\n    success: true,\n    data: tasks,\n    count: tasks.length\n  });\n});\n\n// POST new task\napp.post('/tasks', (req, res) => {\n  const { title, description, assignedTo } = req.body;\n  \n  if (!title) {\n    return res.status(400).json({\n      success: false,\n      error: 'Title is required'\n    });\n  }\n  \n  const newTask = {\n    id: tasks.length + 1,\n    title,\n    description: description || 'Status: Pending',\n    assignedTo: assignedTo || 'Current User',\n    completed: false\n  };\n  \n  tasks.push(newTask);\n  res.status(201).json({\n    success: true,\n    data: newTask\n  });\n});\n\n// PUT update task\napp.put('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const taskIndex = tasks.findIndex(task => task.id === taskId);\n  \n  if (taskIndex === -1) {\n    return res.status(404).json({\n      success: false,\n      error: 'Task not found'\n    });\n  }\n  \n  tasks[taskIndex] = { ...tasks[taskIndex], ...req.body };\n  res.json({\n    success: true,\n    data: tasks[taskIndex]\n  });\n});\n\n// DELETE task\napp.delete('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const taskIndex = tasks.findIndex(task => task.id === taskId);\n  \n  if (taskIndex === -1) {\n    return res.status(404).json({\n      success: false,\n      error: 'Task not found'\n    });\n  }\n  \n  const deletedTask = tasks.splice(taskIndex, 1)[0];\n  res.json({\n    success: true,\n    data: deletedTask\n  });\n});",explanations:[{line:"app.get('/tasks', (req, res) => { res.json({ success: true, data: tasks }); });",explanation:"Create an endpoint that responds to GET requests at /tasks by returning all tasks in JSON format.",businessContext:"This implements 'users should be able to view all current tasks' - the foundation for shared task visibility across the Ministry."},{line:"app.post('/tasks', (req, res) => { const { title, description, assignedTo } = req.body;",explanation:"Create an endpoint for POST requests that extracts task data from the request body.",businessContext:"This handles 'staff should be able to create new tasks' and validates that required information is provided."},{line:"if (!title) { return res.status(400).json({ success: false, error: 'Title is required' }); }",explanation:"Validate that required fields are provided and return an error if not.",businessContext:"This enforces the business rule 'all tasks must have a title' and provides clear feedback when requirements aren't met."},{line:"app.put('/tasks/:id', (req, res) => { const taskId = parseInt(req.params.id);",explanation:"Create an endpoint for updating tasks, extracting the task ID from the URL parameter.",businessContext:"This enables 'users should be able to edit existing tasks' with proper identification of which task to modify."},{line:"app.delete('/tasks/:id', (req, res) => { const deletedTask = tasks.splice(taskIndex, 1)[0];",explanation:"Create an endpoint for deleting tasks and return the deleted task as confirmation.",businessContext:"This implements 'users should be able to remove completed tasks' with confirmation of what was deleted."}]},startingCode:"const express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// In-memory task storage (temporary)\nlet tasks = [\n  {\n    id: 1,\n    title: \"Evaluate Mr. Smith's Silly Walk Application\",\n    description: \"Review submitted video and assess walk silliness level.\",\n    assignedTo: \"John Cleese\",\n    completed: false\n  }\n];\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Ministry of Silly Walks Task Management API',\n    version: '1.0.0',\n    endpoints: {\n      'GET /tasks': 'Get all tasks',\n      'POST /tasks': 'Create a new task',\n      'PUT /tasks/:id': 'Update a task',\n      'DELETE /tasks/:id': 'Delete a task'\n    }\n  });\n});\n\n// Step 2: Add CRUD endpoints here\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",targetCode:"const express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// In-memory task storage (temporary)\nlet tasks = [\n  {\n    id: 1,\n    title: \"Evaluate Mr. Smith's Silly Walk Application\",\n    description: \"Review submitted video and assess walk silliness level.\",\n    assignedTo: \"John Cleese\",\n    completed: false\n  }\n];\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Ministry of Silly Walks Task Management API',\n    version: '1.0.0',\n    endpoints: {\n      'GET /tasks': 'Get all tasks',\n      'POST /tasks': 'Create a new task',\n      'PUT /tasks/:id': 'Update a task',\n      'DELETE /tasks/:id': 'Delete a task'\n    }\n  });\n});\n\n// GET all tasks\napp.get('/tasks', (req, res) => {\n  res.json({\n    success: true,\n    data: tasks,\n    count: tasks.length\n  });\n});\n\n// POST new task\napp.post('/tasks', (req, res) => {\n  const { title, description, assignedTo } = req.body;\n  \n  if (!title) {\n    return res.status(400).json({\n      success: false,\n      error: 'Title is required'\n    });\n  }\n  \n  const newTask = {\n    id: tasks.length + 1,\n    title,\n    description: description || 'Status: Pending',\n    assignedTo: assignedTo || 'Current User',\n    completed: false\n  };\n  \n  tasks.push(newTask);\n  res.status(201).json({\n    success: true,\n    data: newTask\n  });\n});\n\n// PUT update task\napp.put('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const taskIndex = tasks.findIndex(task => task.id === taskId);\n  \n  if (taskIndex === -1) {\n    return res.status(404).json({\n      success: false,\n      error: 'Task not found'\n    });\n  }\n  \n  tasks[taskIndex] = { ...tasks[taskIndex], ...req.body };\n  res.json({\n    success: true,\n    data: tasks[taskIndex]\n  });\n});\n\n// DELETE task\napp.delete('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const taskIndex = tasks.findIndex(task => task.id === taskId);\n  \n  if (taskIndex === -1) {\n    return res.status(404).json({\n      success: false,\n      error: 'Task not found'\n    });\n  }\n  \n  const deletedTask = tasks.splice(taskIndex, 1)[0];\n  res.json({\n    success: true,\n    data: deletedTask\n  });\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",hints:["Add the four CRUD endpoints after the welcome route","GET /tasks returns all tasks, POST /tasks creates new ones","PUT /tasks/:id updates a specific task, DELETE /tasks/:id removes it","Use req.params.id to get the task ID from the URL","Always validate required fields and handle errors gracefully"],explanation:{whatIsHappening:"You've built a complete REST API with all four CRUD operations! Each endpoint handles a specific HTTP method (GET, POST, PUT, DELETE) and includes proper error handling, data validation, and structured JSON responses. The API can now handle all the task management operations your frontend needs.",whyItMatters:"This creates the technical foundation for enterprise-level task management. Multiple users can now interact with the same data source, enabling collaboration, reporting, and centralized management. The structured error handling ensures reliable operation and clear feedback when something goes wrong.",realWorldConnection:"This is how real business applications work - REST APIs with standardized endpoints that different systems can integrate with. When you write requirements about 'system integration' or 'data APIs for reporting,' this is the type of implementation that enables those capabilities. Understanding API design helps you write more precise integration requirements.",keyTerms:{"REST API":"REpresentational State Transfer - a standard way of designing web APIs","HTTP methods":"GET (read), POST (create), PUT (update), DELETE (remove)","Status codes":"Numeric codes like 200 (success), 400 (bad request), 404 (not found)","Request parameters":"Data passed in URLs (:id) or request bodies (JSON)"}}}},{id:"test-api-endpoints",title:"Step 3: Testing the API",type:"coding",exercise:{title:"Test API Endpoints with Mock Data",description:"Let's create a test page that demonstrates how API endpoints work by simulating server responses with mock data and realistic API patterns.",instructions:["Create an HTML page with buttons to test each API operation","Use JavaScript to simulate realistic API responses with mock data","Display the API responses in a readable format to show data structure","Test GET, POST, PUT, and DELETE operations with simulated server delay"],language:"html",startingCode:'<!DOCTYPE html>\n<html lang="en-GB">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Ministry API Tester</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f8f9fa;\n        }\n        button {\n            background-color: #003d7a;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        button:hover {\n            background-color: #002a5c;\n        }\n        #output {\n            background-color: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 15px;\n            margin-top: 20px;\n            white-space: pre-wrap;\n            font-family: monospace;\n        }\n    </style>\n</head>\n<body>\n    <h1>Ministry of Silly Walks - API Tester</h1>\n    <p>Test the backend API endpoints</p>\n    \n    <div>\n        <h3>Test Operations:</h3>\n        <button onclick="getAllTasks()">GET All Tasks</button>\n        <button onclick="createTask()">POST New Task</button>\n        <button onclick="updateTask()">PUT Update Task</button>\n        <button onclick="deleteTask()">DELETE Task</button>\n    </div>\n    \n    <div id="output">Click a button to test the API...</div>\n    \n    <script>\n        const API_BASE = \'http://localhost:3000\';\n        \n        function displayOutput(title, data) {\n            const output = document.getElementById(\'output\');\n            output.textContent = `${title}:\\n${JSON.stringify(data, null, 2)}`;\n        }\n        \n        // Step 3: Add API test functions here\n        \n    </script>\n</body>\n</html>',targetCode:'<!DOCTYPE html>\n<html lang="en-GB">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Ministry API Tester</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f8f9fa;\n        }\n        button {\n            background-color: #003d7a;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        button:hover {\n            background-color: #002a5c;\n        }\n        #output {\n            background-color: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 15px;\n            margin-top: 20px;\n            white-space: pre-wrap;\n            font-family: monospace;\n        }\n    </style>\n</head>\n<body>\n    <h1>Ministry of Silly Walks - API Tester</h1>\n    <p>Test the backend API endpoints</p>\n    \n    <div>\n        <h3>Test Operations:</h3>\n        <button onclick="getAllTasks()">GET All Tasks</button>\n        <button onclick="createTask()">POST New Task</button>\n        <button onclick="updateTask()">PUT Update Task</button>\n        <button onclick="deleteTask()">DELETE Task</button>\n    </div>\n    \n    <div id="output">Click a button to test the API...</div>\n    \n    <script>\n        // Mock API data for demo purposes\n        let mockTasks = [\n            {\n                id: 1,\n                title: "Evaluate Mr. Smith\'s Silly Walk Application",\n                description: "Review submitted video and assess walk silliness level",\n                assignedTo: "John Cleese",\n                status: "pending",\n                priority: "high",\n                createdAt: new Date().toISOString()\n            },\n            {\n                id: 2,\n                title: "Process Mrs. Johnson\'s Walk Certification",\n                description: "Complete certification paperwork for approved walk",\n                assignedTo: "Terry Jones",\n                status: "in-progress",\n                priority: "medium",\n                createdAt: new Date().toISOString()\n            }\n        ];\n        \n        let nextId = 3;\n        \n        function displayOutput(title, data) {\n            const output = document.getElementById(\'output\');\n            output.textContent = `${title}:\\n${JSON.stringify(data, null, 2)}`;\n        }\n        \n        // Mock API function to simulate server delay\n        function simulateApiCall(data, delay = 500) {\n            return new Promise((resolve) => {\n                setTimeout(() => resolve(data), delay);\n            });\n        }\n        \n        async function getAllTasks() {\n            try {\n                const response = {\n                    success: true,\n                    data: mockTasks,\n                    count: mockTasks.length\n                };\n                const data = await simulateApiCall(response);\n                displayOutput(\'GET /api/tasks\', data);\n            } catch (error) {\n                displayOutput(\'Error\', { error: error.message });\n            }\n        }\n        \n        async function createTask() {\n            try {\n                const newTask = {\n                    id: nextId++,\n                    title: \'Test Terry Jones Walk Review\',\n                    description: \'Assess comedic timing and silly factor\',\n                    assignedTo: \'Ministry Reviewer\',\n                    status: \'pending\',\n                    priority: \'medium\',\n                    createdAt: new Date().toISOString()\n                };\n                \n                mockTasks.push(newTask);\n                \n                const response = {\n                    success: true,\n                    data: newTask,\n                    message: "Task created successfully"\n                };\n                \n                const data = await simulateApiCall(response);\n                displayOutput(\'POST /api/tasks\', data);\n            } catch (error) {\n                displayOutput(\'Error\', { error: error.message });\n            }\n        }\n        \n        async function updateTask() {\n            try {\n                const taskId = 1;\n                const taskIndex = mockTasks.findIndex(t => t.id === taskId);\n                \n                if (taskIndex === -1) {\n                    throw new Error(\'Task not found\');\n                }\n                \n                // Update the task\n                mockTasks[taskIndex] = {\n                    ...mockTasks[taskIndex],\n                    completed: true,\n                    description: \'COMPLETED: Approved with high silliness rating\',\n                    status: \'completed\',\n                    updatedAt: new Date().toISOString()\n                };\n                \n                const response = {\n                    success: true,\n                    data: mockTasks[taskIndex],\n                    message: "Task updated successfully"\n                };\n                \n                const data = await simulateApiCall(response);\n                displayOutput(\'PUT /api/tasks/1\', data);\n            } catch (error) {\n                displayOutput(\'Error\', { error: error.message });\n            }\n        }\n        \n        async function deleteTask() {\n            try {\n                const taskId = 2;\n                const taskIndex = mockTasks.findIndex(t => t.id === taskId);\n                \n                if (taskIndex === -1) {\n                    throw new Error(\'Task not found\');\n                }\n                \n                // Delete the task\n                const deletedTask = mockTasks.splice(taskIndex, 1)[0];\n                \n                const response = {\n                    success: true,\n                    data: deletedTask,\n                    message: "Task deleted successfully"\n                };\n                \n                const data = await simulateApiCall(response);\n                displayOutput(\'DELETE /api/tasks/2\', data);\n            } catch (error) {\n                displayOutput(\'Error\', { error: error.message });\n            }\n        }\n    </script>\n</body>\n</html>',hints:["Use mock data stored in JavaScript variables to simulate a database","Use async/await with simulateApiCall() to create realistic response timing","Each function should manipulate the mockTasks array to simulate server operations","Call displayOutput() to show the API response format","The try/catch blocks handle errors gracefully, just like real API calls"],explanation:{whatIsHappening:"You've created a test interface that demonstrates how API endpoints work by simulating realistic server responses! The mock data approach shows how backends store and manipulate data, while the simulated delays make it feel like real network requests. Each button demonstrates a different CRUD operation, showing how data flows between frontend and backend systems.",whyItMatters:"This demonstrates the complete request-response cycle that powers modern web applications. While this uses mock data, the patterns are identical to real API interactions - the same JSON structures, async operations, and error handling. Understanding these patterns helps you write better requirements about data exchange and system integration.",realWorldConnection:"This testing approach mirrors how development teams prototype APIs and how Quality Assurance teams validate endpoints. When you write requirements about 'system testing' or 'API documentation,' this is the type of validation that ensures requirements are properly implemented. The mock approach also shows how frontend and backend development can proceed in parallel.",keyTerms:{"Mock API":"Simulated server responses used for testing and development","Async/await":"JavaScript pattern for handling asynchronous operations like API calls","CRUD operations":"Create, Read, Update, Delete - the fundamental data operations","API testing":"Verifying that endpoints work correctly and handle errors properly"}}}}],m=e=>{t.includes(e)||(u([...t,e]),(0,p.jq)(h[e].id))},k=t.length===h.length;return(0,n.jsxs)("div",{className:"min-h-screen bg-gray-50",children:[(0,n.jsx)("header",{className:"bg-white shadow-sm border-b border-gray-200",children:(0,n.jsx)("div",{className:"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4",children:(0,n.jsxs)("div",{className:"flex items-center justify-between",children:[(0,n.jsxs)(r.default,{href:"/tutorial/chapter-4",className:"flex items-center text-gray-600 hover:text-gray-900",children:[(0,n.jsx)(o.Z,{className:"w-5 h-5 mr-2"}),"Back to Chapter 4"]}),(0,n.jsxs)("div",{className:"text-center",children:[(0,n.jsx)("h1",{className:"text-xl font-bold text-gray-900",children:"Chapter 5: Building the Backend API"}),(0,n.jsx)("p",{className:"text-sm text-gray-600",children:"Creating server endpoints for multi-user functionality"})]}),(0,n.jsxs)("div",{className:"text-sm text-gray-500",children:["Step ",e+1," of ",h.length]})]})})}),(0,n.jsx)("div",{className:"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8",children:(0,n.jsxs)("div",{className:"grid lg:grid-cols-4 gap-8",children:[(0,n.jsx)("div",{className:"lg:col-span-1",children:(0,n.jsxs)("div",{className:"tutorial-card sticky top-8",children:[(0,n.jsx)("h3",{className:"font-semibold text-gray-900 mb-4",children:"Chapter 5 Progress"}),(0,n.jsx)("div",{className:"space-y-3",children:h.map((a,r)=>(0,n.jsx)("button",{onClick:()=>s(r),className:"w-full text-left p-3 rounded-lg transition-colors ".concat(e===r?"bg-tutorial-primary text-white":t.includes(r)?"bg-green-50 text-green-800 border border-green-200":"bg-gray-50 text-gray-700 hover:bg-gray-100"),children:(0,n.jsxs)("div",{className:"flex items-center",children:[t.includes(r)?(0,n.jsx)(d.Z,{className:"w-5 h-5 mr-3 text-green-600"}):(0,n.jsx)("div",{className:"w-5 h-5 mr-3 rounded-full border-2 ".concat(e===r?"border-white":"border-gray-300")}),(0,n.jsx)("span",{className:"text-sm font-medium",children:a.title})]})},a.id))}),k&&(0,n.jsxs)("div",{className:"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg",children:[(0,n.jsx)("p",{className:"text-sm text-green-800 font-medium mb-2",children:"Chapter 5 Complete!"}),(0,n.jsxs)(r.default,{href:"/tutorial/chapter-6",className:"inline-flex items-center text-sm text-green-700 hover:text-green-900",children:["Start Chapter 6",(0,n.jsx)(l.Z,{className:"w-4 h-4 ml-1"})]})]})]})}),(0,n.jsx)("div",{className:"lg:col-span-3",children:(0,n.jsxs)("div",{className:"space-y-8",children:[(0,n.jsxs)("div",{children:[(0,n.jsxs)("div",{className:"flex items-center justify-between mb-2",children:[(0,n.jsx)("span",{className:"text-sm font-medium text-gray-700",children:"Chapter Progress"}),(0,n.jsxs)("span",{className:"text-sm text-gray-500",children:[t.length," / ",h.length," completed"]})]}),(0,n.jsx)("div",{className:"progress-bar",children:(0,n.jsx)("div",{className:"progress-fill",style:{width:"".concat(t.length/h.length*100,"%")}})})]}),"explanation"===h[e].type?(0,n.jsxs)("div",{className:"tutorial-card",children:[h[e].content,(0,n.jsxs)("div",{className:"flex items-center justify-between pt-6 border-t border-gray-200 mt-8",children:[(0,n.jsxs)("button",{onClick:()=>s(Math.max(0,e-1)),disabled:0===e,className:"flex items-center ".concat(0===e?"text-gray-400 cursor-not-allowed":"text-tutorial-primary hover:text-blue-700"),children:[(0,n.jsx)(o.Z,{className:"w-4 h-4 mr-2"}),"Previous"]}),(0,n.jsxs)("button",{onClick:()=>{m(e),e<h.length-1&&s(e+1)},className:"tutorial-button-primary",children:[t.includes(e)?e===h.length-1?"Complete Chapter":"Next Step":"Build the API!",(0,n.jsx)(l.Z,{className:"w-4 h-4 ml-2"})]})]})]}):(0,n.jsx)(c.Z,{...h[e].exercise,stepId:h[e].id,onComplete:()=>{m(e),setTimeout(()=>{e<h.length-1&&s(e+1)},2e3)}})]})})]})})]})}}},function(e){e.O(0,[451,862,971,117,744],function(){return e(e.s=291)}),_N_E=e.O()}]);